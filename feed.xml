<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es"><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://blog.makeitreal.camp/feed.xml" rel="self" type="application/atom+xml" /><link href="http://blog.makeitreal.camp/" rel="alternate" type="text/html" hreflang="es" /><updated>2017-11-06T13:58:15-05:00</updated><id>http://blog.makeitreal.camp/</id><title type="html">El Blog de Make it Real</title><subtitle>Un espacio para compartir conocimiento en programación y emprendimiento.</subtitle><entry><title type="html">Lenguajes compilados e interpretados</title><link href="http://blog.makeitreal.camp/lenguajes-compilados-e-interpretados/" rel="alternate" type="text/html" title="Lenguajes compilados e interpretados" /><published>2017-11-06T02:00:00-05:00</published><updated>2017-11-06T02:00:00-05:00</updated><id>http://blog.makeitreal.camp/lenguajes-compilados-e-interpretados</id><content type="html" xml:base="http://blog.makeitreal.camp/lenguajes-compilados-e-interpretados/">&lt;p&gt;C, C++ y Go son lenguajes de programación &lt;strong&gt;compilados&lt;/strong&gt;. JavaScript, Python y Ruby son lenguajes &lt;strong&gt;interpretados&lt;/strong&gt;. ¿Cuál es la diferencia y las ventajas/desventajas de un lenguaje compilado versus uno interpretado? En este post lo vamos a explicar.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Tanto &lt;strong&gt;compiladores&lt;/strong&gt; como &lt;strong&gt;interpretadores&lt;/strong&gt; son programas que convierten el código que escribes a &lt;strong&gt;lenguaje de máquina&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lenguaje de máquina&lt;/strong&gt; son las instrucciones que entiende el computador (el procesador para ser más exactos) en código binario (unos y ceros).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code-to-machine.png&quot; alt=&quot;Lenguaje de alto nivel a lenguaje de máquina&quot; class=&quot;photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La principal diferencia entre un lenguaje compilado y uno interpretado es que el &lt;strong&gt;lenguaje compilado&lt;/strong&gt; requiere un paso adicional antes de ser ejecutado, la compilación, que convierte el código que escribes a &lt;strong&gt;lenguaje de máquina&lt;/strong&gt;. Un &lt;strong&gt;lenguaje interpretado&lt;/strong&gt;, por otro lado, es convertido a &lt;strong&gt;lenguaje de máquina&lt;/strong&gt; a medida que es ejecutado.&lt;/p&gt;

&lt;p&gt;Ejemplos de &lt;strong&gt;lenguajes compilados&lt;/strong&gt; incluyen C, C++, Java, Go y Rust, entre muchos otros. Ejemplos de &lt;strong&gt;lenguajes interpretados&lt;/strong&gt; incluyen Ruby, Python y JavaScript, entre muchos otros. A todos estos lenguajes se les conoce como &lt;strong&gt;lenguajes de alto nivel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo de cada uno.&lt;/p&gt;

&lt;h2 id=&quot;un-ejemplo-de-lenguaje-interpretado&quot;&gt;Un ejemplo de lenguaje interpretado&lt;/h2&gt;

&lt;p&gt;Ruby es un lenguaje interpretado, así que podemos crear un archivo llamado &lt;code class=&quot;highlighter-rouge&quot;&gt;hola.rb&lt;/code&gt; con el siguiente código, o cualquier código válido en Ruby (a esto se le conoce como el &lt;strong&gt;código fuente&lt;/strong&gt;):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hola Mundo&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Y ejecutarlo directamente ingresando el siguiente comando en la consola:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ruby hello.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Te debería aparecer debajo la cadena “Hola Mundo“.  Si quieres puedes cambiar el código fuente y volverlo a ejecutar.&lt;/p&gt;

&lt;h2 id=&quot;un-ejemplo-de-lenguaje-compilado&quot;&gt;Un ejemplo de lenguaje compilado&lt;/h2&gt;

&lt;p&gt;Un lenguaje compilado tiene un paso adicional. Si tienes un compilador de C como &lt;a href=&quot;https://gcc.gnu.org/&quot; target=&quot;_blank&quot;&gt;gcc&lt;/a&gt; puedes crear un archivo llamado &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.c&lt;/code&gt;  con el siguiente contenido, o cualquier código válido en C:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hola Mundo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Antes de ejecutarlo debes compilarlo con el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcc hello.c -o hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Eso crea un archivo llamado &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; (sin extensión) con el código de máquina (llamado el ejecutable) que puedes correr en la consola con el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Te debería aparecer la cadena de texto “Hola Mundo” debajo. Si necesitas cambiar el código fuente debes volverlo a compilar y ejecutarlo nuevamente.&lt;/p&gt;

&lt;h2 id=&quot;ventajas-y-desventajas&quot;&gt;Ventajas y desventajas&lt;/h2&gt;

&lt;p&gt;En general, &lt;strong&gt;el ciclo de desarrollo (el tiempo entre el momento en que escribes el código y lo pruebas) es más rápido en un lenguaje interpretado&lt;/strong&gt;. Eso se debe a que en lenguajes compilados es necesario realizar el proceso de compilación cada vez que cambias el código fuente, aunque con herramientas adicionales se puede automatizar.&lt;/p&gt;

&lt;p&gt;Otra desventaja de un lenguaje compilado es que cuando compilas un programa debes crear ejecutables para cada uno de los sistemas operativos en los que lo vayas a utilizar. Un ejecutable creado para Linux no va a servir en Windows por ejemplo.&lt;/p&gt;

&lt;p&gt;Sin embargo, &lt;strong&gt;un lenguaje compilado es mucho más rápido que uno interpretado&lt;/strong&gt;. Esto se debe a que cuando es ejecutado ya se encuentra en código de máquina y eso también le permite hacer algunas optimizaciones que no son posibles con un lenguaje interpretado.&lt;/p&gt;

&lt;p&gt;Además de la velocidad, otra desventaja de un lenguaje interpretado es que, para ser ejecutado, debes tener instalado el interpretador. Esto no es necesario en un lenguaje compilado que es convertido a lenguaje de máquina&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;En general, &lt;strong&gt;un lenguaje compilado está optimizado para el momento de la ejecución&lt;/strong&gt;, aunque esto signifique una carga adicional para el programador. Por otro lado, &lt;strong&gt;un lenguaje interpretado está optimizado para hacerle la vida más fácil al programador&lt;/strong&gt;, aunque eso signifique una carga adicional para la máquina.&lt;/p&gt;

&lt;h2 id=&quot;el-caso-de-java&quot;&gt;El caso de Java&lt;/h2&gt;

&lt;p&gt;Java es un lenguaje particular porque es compilado, pero es compilado a un lenguaje intermedio llamado &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_bytecode&quot; target=&quot;_blank&quot;&gt;bytecode&lt;/a&gt;, que después es interpretado. Los creadores de Java querían crear un lenguaje compilado, pero que se pudiera ejecutar en cualquier sistema operativo y procesador sin necesidad de crear varios ejecutables.&lt;/p&gt;

&lt;p&gt;Es por eso que si quieres ejecutar código Java debes instalar el &lt;a href=&quot;https://java.com/es/download/&quot; target=&quot;_blank&quot;&gt;JRE (Java Runtime Environment)&lt;/a&gt;, que es el programa que se encarga de interpretar el &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_bytecode&quot; target=&quot;_blank&quot;&gt;bytecode&lt;/a&gt; al que son compilados los programas de Java.&lt;/p&gt;

&lt;p&gt;Si deseas compilar código Java no es suficiente instalar el JRE, necesitas el &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot;&gt;JDK (Java Development Kit)&lt;/a&gt; que incluye el compilador, entre otras herramientas de desarrollo.&lt;/p&gt;

&lt;p&gt;Otros lenguajes que están siguiendo este mismo modelo incluyen Elixir y C#, entre otros.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Se puede decir que los lenguajes de alto nivel se pueden dividir en tres ramas: puramente compilados (C++, Go, etc.), parcialmente compilados  (Java, Elixir, etc.)  e interpretados (Ruby, JavaScript, etc.).&lt;/p&gt;

&lt;p&gt;Sin embargo, la brecha entre estas ramas cada vez es menor. Hoy existen lenguajes compilados a lenguaje de máquina como Go y Rust que se inclinan cada vez más en la productividad y felicidad del programador mientras que los lenguajes interpretados son cada vez más rápidos en ejecución.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Como vamos a ver adelante existen lenguajes compilados que no son convertidos directamente a lenguaje de máquina sino a un lenguaje intermedio.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Germán Escobar</name></author><summary type="html">C, C++ y Go son lenguajes de programación compilados. JavaScript, Python y Ruby son lenguajes interpretados. ¿Cuál es la diferencia y las ventajas/desventajas de un lenguaje compilado versus uno interpretado? En este post lo vamos a explicar.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/lights-exposure.jpeg" /></entry><entry><title type="html">La era de la información digital</title><link href="http://blog.makeitreal.camp/la-era-de-la-informacion-digital/" rel="alternate" type="text/html" title="La era de la información digital" /><published>2017-10-28T02:00:00-05:00</published><updated>2017-10-28T02:00:00-05:00</updated><id>http://blog.makeitreal.camp/la-era-de-la-informacion-digital</id><content type="html" xml:base="http://blog.makeitreal.camp/la-era-de-la-informacion-digital/">&lt;p&gt;¿Qué significa digital? ¿qué podemos considerar información? ¿cómo podemos medirla? ¿qué es un bit? En este post explicaremos por qué nos encontramos en la era de la información digital.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Alrededor del año 3000 AEC, en Mesopotamia, los sumerios implementaron la primera forma de escritura, llamada escritura cuneiforme. Antes de la escritura, la única forma de almacenar y replicar información era utilizando nuestros cerebros, que &lt;strong&gt;no&lt;/strong&gt; son particularmente buenos para esa tarea.&lt;/p&gt;

&lt;p&gt;La escritura nos permitió almacenar texto, pero más adelante también fue posible almacenar música, imágenes y video en diferentes medios análogos como vinilos, fotografías y cintas magnéticas.&lt;/p&gt;

&lt;p&gt;Hoy podemos almacenar toda esa información en nuestros computadores de forma digital. Pero ¿cómo es eso posible?&lt;/p&gt;

&lt;p&gt;La respuesta es que en 1948 un personaje llamado &lt;a href=&quot;https://es.wikipedia.org/wiki/Claude_Elwood_Shannon&quot; target=&quot;_blank&quot;&gt;Claude Shannon&lt;/a&gt;, en su publicación &lt;a href=&quot;https://es.wikipedia.org/wiki/Una_teor%C3%ADa_matem%C3%A1tica_de_la_comunicaci%C3%B3n&quot; target=&quot;_blank&quot;&gt;Una Teoría Matemática de la Comunicación&lt;/a&gt; demostró cómo toda la información puede ser representada en números, sin importar de qué tipo sea (texto, audio, video, etc.). Su principal objetivo era demostrar que cualquier mensaje se puede transmitir utilizando números, pero su teoría también fue aplicada al almacenamiento de información.&lt;/p&gt;

&lt;p&gt;Por ejemplo, una forma en que podemos representar texto con números (la palabra correcta es &lt;strong&gt;codificar&lt;/strong&gt;) es asignándole a cada letra del alfabeto un número único: 1 para representar la A, 2 para la B, 26 para la Z, 0 para el espacio, etc.&lt;/p&gt;

&lt;p&gt;También es posible representar audio, imágenes y video con técnicas similares, aunque un poco más sofisticadas: audio no son más que cambios de frecuencias en el tiempo, que también pueden ser representados con números. Una imagen puede ser separada en pixeles (cuadrados) y utilizar números para expresar el color de cada pixel.&lt;/p&gt;

&lt;p&gt;Al proceso de convertir la información en números se le conoce como digitalización, y por eso se habla de información digital (está almacenada en dígitos).&lt;/p&gt;

&lt;p&gt;La información digital tiene la ventaja de que es fácilmente replicable (y las réplicas son exactas), pero la desventaja es que se puede perder información en el proceso de digitalización, como cuando la música en vinilo pierde fidelidad al ser digitalizada o cuando una fotografía se ve pixelada por baja resolución.&lt;/p&gt;

&lt;h2 id=&quot;dígitos-binarios&quot;&gt;Dígitos binarios&lt;/h2&gt;

&lt;p&gt;El sistema numérico al que estamos acostumbrados es el decimal, que utiliza diez dígitos en cada posición: 0 a 9.&lt;/p&gt;

&lt;p&gt;Pero existen otros sistemas numéricos como el binario, compuesto de dos dígitos en cada posición (0 y 1), o el octal, compuesto por 8 dígitos en cada posición (0 a 7), o el hexadecimal, compuesto de 16 dígitos en cada posición (se utilizan las letras A, B, C, D, E y F para representar los números del 10 al 15).&lt;/p&gt;

&lt;p&gt;Cualquier número se puede convertir de un sistema a otro. La diferencia es que un sistema puede necesitar más o menos posiciones que otro para representar el mismo número. Por ejemplo, para representar el número doce necesitamos dos posiciones en el sistema decimal (12). En el sistema hexadecimal sólo necesitamos una posición (C) y en el sistema binario necesitamos cuatro posiciones (1100).&lt;/p&gt;

&lt;p&gt;Aunque es posible crear un computador utilizando el sistema decimal (de hecho los primeros computadores utilizaban este sistema), es mucho mejor utilizar el sistema binario. La razón es que los computadores utilizan diferentes voltajes eléctricos para representar cada dígito. Entre más voltajes necesitemos, mayor el consumo de energía y mayor la probabilidad de error.&lt;/p&gt;

&lt;p&gt;Es por eso que hoy en día almacenamos y transmitimos toda la información utilizando únicamente dos dígitos (0 y 1), más conocidos como &lt;strong&gt;bits&lt;/strong&gt;, que es una contracción de las palabras &lt;strong&gt;binary digits&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;medir-la-información&quot;&gt;Medir la información&lt;/h2&gt;

&lt;p&gt;Una consecuencia interesante de representar la información en dígitos es que es posible medirla, sin importar si es texto, imágenes, audio o video.  Por ejemplo,  podemos decir que nuestro disco duro tiene 500 gigabytes ocupados, independiente si es texto, música, o cualquier otro tipo de información.&lt;/p&gt;

&lt;p&gt;Por cierto, 8 bits forman un byte, 1000 bytes forman un kilobyte, 1000 kilobytes forman un megabyte, 1000 megabytes forman un gigabyte, y así sucesivamente. Siguen los terabytes, petabytes, exabytes, etc.  Un petabyte, por ejemplo, son 8000000000000000 bits (esos son 15 ceros).&lt;/p&gt;

&lt;p&gt;También podemos medir la cantidad de información que estamos produciendo por alguna medida de tiempo, por ejemplo por día, hora, segundo, etc. Según &lt;a href=&quot;http://www.new.vcloudnews.com/wp-content/uploads/2015/04/big-data-infographic1.png&quot; target=&quot;_blank&quot;&gt;esta infografía&lt;/a&gt;, en 1992 estábamos generando 100GB de información digital al día, se calcula que para el 2018 estaremos generando 50 terabytes por segundo!&lt;/p&gt;

&lt;p&gt;Nuestros descendientes no van a tener el problema que tenemos nosotros encontrando información de nuestros antepasados, al contrario, su problema es que van a tener demasiada información por analizar. Y esa es la razón por la que a esta era la llamamos &lt;strong&gt;la era de la información digital&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Otros posts relacionados:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/que-es-codigo&quot;&gt;¿Qué es código?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/aprende-a-leer-en-codigo-binario&quot;&gt;Aprende a leer en código binario&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Germán Escobar</name></author><summary type="html">¿Qué significa digital? ¿qué podemos considerar información? ¿cómo podemos medirla? ¿qué es un bit? En este post explicaremos por qué nos encontramos en la era de la información digital.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/digital-analog.jpeg" /></entry><entry><title type="html">La fortuna de ser programador</title><link href="http://blog.makeitreal.camp/la-fortuna-de-ser-programador/" rel="alternate" type="text/html" title="La fortuna de ser programador" /><published>2017-10-02T02:00:00-05:00</published><updated>2017-10-02T02:00:00-05:00</updated><id>http://blog.makeitreal.camp/la-fortuna-de-ser-programador</id><content type="html" xml:base="http://blog.makeitreal.camp/la-fortuna-de-ser-programador/">&lt;p&gt;La programación es uno de los trabajos con mejores salarios de la actualidad y una de las carreras más importantes del futuro. Y sin embargo, esto &lt;strong&gt;no&lt;/strong&gt; es lo que me hace sentir más afortunado de ser un programador.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;La programación es mucho más que escribir código. La programación es un proceso creativo, mentalmente desafiante, que genera gran satisfacción personal.&lt;/p&gt;

&lt;p&gt;Empezar con una pantalla en blanco y en algunas horas poder construir algo que antes no existía, algo que puede funcionar sin nuestra intervención, es fascinante, y la sensación cuando otros empiezan a utilizar eso que hemos construído es simplemente indescriptible.&lt;/p&gt;

&lt;p&gt;Los programadores tenemos la fortuna de aprender nuevas cosas todos los días. Y no sólo de programación, sino de otras industrias. Si estamos haciendo una aplicación financiera, por ejemplo, aprendemos también de finanzas. Si es una aplicación para músicos, aprendemos también de música (a menos de que sea una aplicación que les ayuda a los músicos a llevar sus finanzas 😂).&lt;/p&gt;

&lt;p&gt;Gracias a la programación, y la tecnología en general, hoy varios países ya podrían pagar un salario básico a cada uno de sus habitantes para que ninguna persona tenga que depender de un trabajo monótono y repetitivo para subsistir. Necesitamos más programadores que nos ayuden a acelerar ese proceso.&lt;/p&gt;

&lt;p&gt;Por todo esto me siento muy afortunado de ser un programador.&lt;/p&gt;

&lt;p&gt;Pero lo que me hace sentir más afotrunado es poder hacer lo que me apasiona todos los días, a cualquier hora y desde cualquier lugar. Y eso es algo que no cambiaría por nada del mundo.&lt;/p&gt;</content><author><name>Germán Escobar</name></author><summary type="html">La programación es uno de los trabajos con mejores salarios de la actualidad y una de las carreras más importantes del futuro. Y sin embargo, esto no es lo que me hace sentir más afortunado de ser un programador.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/sunset-tree.jpg" /></entry><entry><title type="html">¿Cómo aprovechar al máximo los mentores de Make it Real?</title><link href="http://blog.makeitreal.camp/como-aprovechar-al-maximo-los-mentores/" rel="alternate" type="text/html" title="¿Cómo aprovechar al máximo los mentores de Make it Real?" /><published>2017-09-18T02:00:00-05:00</published><updated>2017-09-18T02:00:00-05:00</updated><id>http://blog.makeitreal.camp/como-aprovechar-al-maximo-los-mentores</id><content type="html" xml:base="http://blog.makeitreal.camp/como-aprovechar-al-maximo-los-mentores/">&lt;p&gt;Quizá la principal ventaja de nuestros programas es la guía y retroalimentación de los mentores. En este post aprenderás cómo aprovecharlos al máximo para acelerar tu aprendizaje.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Toda la información para aprender a programar está en Internet. El problema no es falta de información, al contrario, uno de los problemas que tienen hoy las personas que quieren aprender a programar es el exceso de información.&lt;/p&gt;

&lt;p&gt;En &lt;a href=&quot;https://makeitreal.camp/&quot;&gt;Make it Real&lt;/a&gt; hemos diseñado programas que aceleran tu aprendizaje a través de retos, proyectos, contenido propio y contenido cuidadosamente seleccionado de Internet. Sin embargo, si tu objetivo es ver muchos videos, nuestros programas no son para ti. Uno no aprende a programar viendo videos, uno aprende escribiendo código.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;En nuestros programas vas a tener que buscar en Internet y escribir código desde el primer día.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No te preocupes si te atascas en un reto o proyecto. Es normal y para eso están los mentores. Si llevas más de una hora atascado(a) pide ayuda. No te vamos a dar la respuesta pero te vamos a guiar para que lo puedas solucionar. Lo más útil es que nos muestres el código que llevas y lo que has buscado en Internet hasta ese momento. De esa forma sabremos cómo guiarte mejor.&lt;/p&gt;

&lt;p&gt;Esto también requiere un cambio de mentalidad. Lo que hemos notado es que a muchas personas les da pena mostrar su código y preguntar para no parecer ignorantes. Pero &lt;strong&gt;aceptar nuestra ignorancia es el primer paso para aprender&lt;/strong&gt;. Quitarte esa barrera mental es fundamental para que tengas éxito en cualquiera de nuestros programas online.&lt;/p&gt;

&lt;p&gt;Las asesorías no tienen que ser exclusivamente de los retos y proyectos del programa. También te podemos guiar en tus proyectos personales o en tu trabajo (siempre y cuando esté relacionado con las tecnologías que enseñamos). De hecho esa es una de las mejores formas de aprender!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recuerda que en &lt;a href=&quot;https://makeitreal.camp/&quot;&gt;Make it Real&lt;/a&gt; cuentas con asesorías ilimitadas&lt;/strong&gt;. Los mentores estamos disponibles de 7am a 12pm aproximadamente, y generalmente respondemos en menos de 1 hora. Si necesitas ayuda en un horario diferente lo podemos coordinar con antelación.&lt;/p&gt;

&lt;p&gt;La mayoría de preguntas las podemos contestar por nuestro chat interno, pero hay veces que es mejor hacer una videollamada. En ese caso asegúrate de coordinar la hora de encuentro con tu mentor, tener una buena conexión a Internet y poco ruido de fondo.&lt;/p&gt;

&lt;p&gt;En &lt;a href=&quot;https://makeitreal.camp/&quot;&gt;Make it Real&lt;/a&gt; queremos que tengas éxito en nuestros programas. Nos hemos esforzado por crear programas estructurados, de la más alta calidad, apoyados de nuestra plataforma de aprendizaje y mentores experimentados que te van a guiar y ayudar. Pero necesitamos que hagas tu parte: que seas constante y te apoyes en nosotros para acelerar tu aprendizaje.&lt;/p&gt;

&lt;p&gt;Te recomiendo estos otros posts relacionados en nuestro blog:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/saber-programar-y-como-aprender/&quot;&gt;¿Qué significa saber programar y cómo aprender?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/consejos-para-aprender-a-programar/&quot;&gt;3 consejos para aprender a programar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/que-hace-diferente-a-make-it-real/&quot;&gt;¿Qué hace diferente a Make it Real?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Germán Escobar</name></author><summary type="html">Quizá la principal ventaja de nuestros programas es la guía y retroalimentación de los mentores. En este post aprenderás cómo aprovecharlos al máximo para acelerar tu aprendizaje.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/traffic-light.jpeg" /></entry><entry><title type="html">El nombre Make it Real</title><link href="http://blog.makeitreal.camp/el-nombre-make-it-real/" rel="alternate" type="text/html" title="El nombre Make it Real" /><published>2017-08-31T06:00:00-05:00</published><updated>2017-08-31T06:00:00-05:00</updated><id>http://blog.makeitreal.camp/el-nombre-make-it-real</id><content type="html" xml:base="http://blog.makeitreal.camp/el-nombre-make-it-real/">&lt;p&gt;La recomendación fue clara: Make it Real es un nombre muy genérico y eso lo hace difícil de posicionar en buscadores. Además, la terminación poco conocida &lt;code class=&quot;highlighter-rouge&quot;&gt;.camp&lt;/code&gt; no iba a colaborar 😂&lt;!-- more --&gt; (por cierto, el &lt;code class=&quot;highlighter-rouge&quot;&gt;.camp&lt;/code&gt; es de Boot&lt;strong&gt;camp&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Pero &lt;strong&gt;Make it Real&lt;/strong&gt; era precisamente el mensaje que quería expresar. Pensamos dejarlo en español (&lt;strong&gt;hazlo realidad&lt;/strong&gt;) pero, por un lado, no sonaba bien y, por otro, saber qué significa &lt;strong&gt;Make it Real&lt;/strong&gt; es el mínimo nivel de Inglés que esperamos de una persona que desee ingresar a cualquiera de nuestros programas.&lt;/p&gt;

&lt;p&gt;Fue una gran apuesta. Pero hoy, después de más de tres años, seguimos firmes con él. Puede que no seamos el primer resultado en Google, pero &lt;strong&gt;Make it Real&lt;/strong&gt; es parte fundamental de nuestra filosofía: &lt;strong&gt;ayudar a cada uno de nuestros alumnos a hacer su sueño realidad&lt;/strong&gt;, ya sea encontrar un (mejor) empleo o crear sus propios productos digitales. Y eso significa concentrarse en la calidad por encima de la cantidad.&lt;/p&gt;</content><author><name>Germán Escobar</name></author><summary type="html">La recomendación fue clara: Make it Real es un nombre muy genérico y eso lo hace difícil de posicionar en buscadores. Además, la terminación poco conocida .camp no iba a colaborar 😂</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/bg-makeitreal.jpeg" /></entry><entry><title type="html">¿Por qué no es tarde para cambiar de carrera?</title><link href="http://blog.makeitreal.camp/por-que-no-es-tarde-para-cambiar-de-carrera/" rel="alternate" type="text/html" title="¿Por qué no es tarde para cambiar de carrera?" /><published>2017-08-15T06:00:00-05:00</published><updated>2017-08-15T06:00:00-05:00</updated><id>http://blog.makeitreal.camp/por-que-no-es-tarde-para-cambiar-de-carrera</id><content type="html" xml:base="http://blog.makeitreal.camp/por-que-no-es-tarde-para-cambiar-de-carrera/">&lt;p&gt;Siempre me ha gustado considerarme un emprendedor. Siempre he creído que emprender es tener una idea de negocio y sacar esta idea adelante. Hoy precisamente me dio la curiosidad y quise aprender más, no de lo que significa ser emprendedor, sino de saber más de los origenes de esta palabra, tan común hoy en día.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Al buscar emprendimiento en Google el primer resultado que obtuve fue la definición de esta palabra, que fue la siguiente: “Inicio de una actividad que exige esfuerzo o trabajo, o tiene cierta importancia o envergadura.”&lt;/p&gt;

&lt;p&gt;Ahora teniendo claro que el emprendimiento no es solo crear un negocio sino tomar riesgos para tomar acción sobre cualquier situación, decidí que era momento de compartir mi experiencia, mi historia y las razones de porque hoy en día, aún siendo empleado por primera vez en mi vida, me considero más emprendedor que en muchas otras situaciones de mi vida.&lt;/p&gt;

&lt;p&gt;Hace ya unos 6 meses que decidí hacer un cambio en mi vida profesional. Los resultados que estaba obteniendo en los negocios que estaba “emprendiendo” en aquellos días no eran los que yo esperaba, lo que hacía me gustaba pero no me sentía particularmente apasionado por muchos de los aspectos de mis actividades diarias. Fue en este momento en el que tomé una decisión un poco radical. Dejar todo atrás y empezar de cero un nuevo proyecto, un nuevo camino, asumir un nuevo reto. Y fue en este momento en que llegó a mi vida la programación (anteriormente había leído algo pero nunca había tenido la oportunidad de ir más a fondo). Por muchos aspectos como la comunidad, los recursos y, no lo puedo negar, también el aspecto financiero, me atrajo. Decidí que aprender a programar sería mi nuevo camino, mi nuevo reto.&lt;/p&gt;

&lt;p&gt;Para ponerlos un poco más en contexto: tengo 26 años, pase 5 años de mi vida en la universidad donde me gradué de Administración de Empresas Agropecuarias, luego pase 2 años en una startup de operaciones turísticas, vivo con mi novia, tengo tantos problemas como una persona común, tengo tantas obligaciones como una persona común. Tomar esta decisión significaría más problemas personales, más problemas económicos, incertidumbre por no saber hacía donde iba, ni cuando iba a llegar. Aún así la decisión estaba clara para mi, mi felicidad sopesaba todas las desventajas e inconvenientes.&lt;/p&gt;

&lt;p&gt;No fue algo fácil pero llegó el momento de buscar trabajo donde podría poner a prueba todo lo que había aprendido, y donde finalmente sabría si había o no tomado la decisión correcta. Al igual que siendo Administrador de Empresas Agropecuarias, Operador turístico no demoraron en llegar los “no” y los rechazos, empresas tras empresas me rechazaban por mi falta de experiencia y conocimiento, pero algo era totalmente diferente, era feliz, me gustaba lo que hacía y no estaba dispuesto a aceptar el fracaso. Continue buscando hasta que finalmente la oportunidad se dio. Hoy en día trabajo como programador, y definitivamente no cambiaría el trabajo que tengo por ninguno de los que he tenido anteriormente.&lt;/p&gt;

&lt;p&gt;Si yo pude, ¿Tu por qué no?&lt;/p&gt;

&lt;p&gt;¡Atrévete a soñar!&lt;/p&gt;

&lt;p&gt;Finalmente me gustaría resaltar que durante todo este proceso tuve la fortuna de contar con el apoyo incondicional de algunas personas (especialmente por parte de mi novia Daniela Olaya), y de encontrarme con un gran programa como lo es Make it Real con grandes mentores y excelentes compañeros que hicieron del recorrido algo más ameno.&lt;/p&gt;

&lt;p&gt;P.S Mi novia también renunció a su trabajo donde era infeliz y ahora empezó su propio negocio de adiestramiento canino.&lt;/p&gt;</content><author><name>Simón Hoyos</name></author><summary type="html">Siempre me ha gustado considerarme un emprendedor. Siempre he creído que emprender es tener una idea de negocio y sacar esta idea adelante. Hoy precisamente me dio la curiosidad y quise aprender más, no de lo que significa ser emprendedor, sino de saber más de los origenes de esta palabra, tan común hoy en día.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/never-too-late.jpg" /></entry><entry><title type="html">El protocolo HTTP</title><link href="http://blog.makeitreal.camp/el-protocolo-http/" rel="alternate" type="text/html" title="El protocolo HTTP" /><published>2017-08-09T06:00:00-05:00</published><updated>2017-08-09T06:00:00-05:00</updated><id>http://blog.makeitreal.camp/el-protocolo-http</id><content type="html" xml:base="http://blog.makeitreal.camp/el-protocolo-http/">&lt;p&gt;El protocolo &lt;strong&gt;HTTP&lt;/strong&gt; (HyperText Transfer Protocol) es quizá el protocolo más importante que debemos conocer como desarrolladores Web y la razón por la que muchos tenemos hoy un empleo ;)&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Fue diseñado para transmitir &lt;strong&gt;HTML&lt;/strong&gt; (HyperText Markup Language) pero hoy en día se utiliza para transmitir todo tipo de documentos (imágenes, audio, video, PDF, etc.) y para crear aplicaciones Web.&lt;/p&gt;

&lt;div class=&quot;well&quot;&gt;
&lt;p&gt;Un &lt;strong&gt;protocolo&lt;/strong&gt; es un documento que define las reglas y la estructura de los mensajes que se van a intercambiar entre máquinas.&lt;/p&gt;

&lt;p&gt;Además de &lt;strong&gt;HTTP&lt;/strong&gt;, ejemplos de protocolos incluyen &lt;strong&gt;SMTP&lt;/strong&gt; (Simple Mail Transfer Protocol) para transmitir mensajes de correo electrónico y &lt;strong&gt;FTP&lt;/strong&gt; (File Transfer Protocolo) para transmitir archivos.&lt;/p&gt;

&lt;p&gt;Sin embargo, cualquier persona puede crear un protocolo. &lt;a href=&quot;https://skype.com/&quot; target=&quot;_blank&quot;&gt;Skype&lt;/a&gt;, por ejemplo, desarrolló su &lt;a href=&quot;https://en.wikipedia.org/wiki/Skype_protocol&quot; target=&quot;_blank&quot;&gt;propio protocolo&lt;/a&gt; de comunicación peer-to-peer.&lt;/p&gt;

&lt;p&gt;El documento completo del protocolo HTTP lo puedes encontrar en &lt;a href=&quot;https://www.ietf.org/rfc/rfc2068.txt&quot; target=&quot;_blank&quot;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;HTTP&lt;/strong&gt; es un protocolo &lt;strong&gt;cliente-servidor&lt;/strong&gt;, lo que significa que el cliente envía una petición al servidor y espera un mensaje de respuesta del servidor. Es un protocolo &lt;strong&gt;sin estado&lt;/strong&gt;, lo que significa que el servidor no guarda información del cliente, cada petición es independiente de las demás.&lt;/p&gt;

&lt;h2 id=&quot;mensajes-http&quot;&gt;Mensajes HTTP&lt;/h2&gt;

&lt;p&gt;Un mensaje &lt;strong&gt;HTTP&lt;/strong&gt; (no importa si es de petición o respuesta) se compone de 3 partes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La primera línea (que es diferente para la petición y la respuesta).&lt;/li&gt;
  &lt;li&gt;Los encabezados.&lt;/li&gt;
  &lt;li&gt;El cuerpo (opcional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos un ejemplo de un mensaje de petición (sin cuerpo):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /index.html HTTP/1.1
Host: wikipedia.org
Accept: text/html

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;En este ejemplo estamos solicitando el recurso &lt;code class=&quot;highlighter-rouge&quot;&gt;/index.html&lt;/code&gt; de &lt;a href=&quot;https://wikipedia.org&quot; target=&quot;_blank&quot;&gt;wikipedia.org&lt;/a&gt;. La primera línea del mensaje de petición se compone de:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El verbo (en este caso &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;El recurso (en este caso &lt;code class=&quot;highlighter-rouge&quot;&gt;/index&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;La versión de HTTP (en este caso &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/1.1&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora veamos un ejemplo de un mensaje de respuesta:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Server: wikipedia.org
Content-Type: text/html
Content-Lenght: 2026

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  …
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La primera línea del mensaje de respuesta se compone de:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La versión de HTTP (&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/1.1&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;El código de respuesta (&lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La siguiente imagen muestra mejor las partes de cada mensaje:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/http-messages.jpg&quot; alt=&quot;Concurrencia basada en eventos&quot; class=&quot;photo border&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;el-verbo-http&quot;&gt;El verbo HTTP&lt;/h3&gt;

&lt;p&gt;La primera línea de un mensaje de petición empieza con un &lt;strong&gt;verbo&lt;/strong&gt; (también se le conoce como &lt;strong&gt;método&lt;/strong&gt;). Los &lt;strong&gt;verbos&lt;/strong&gt; definen la acción que se quiere realizar sobre el recurso. Los verbos más comunes son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;: se utiliza para solicitar un recurso.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;: se utiliza para publicar un recurso.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt;: se utiliza para reemplazar un recurso.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt;: se utiliza para eliminar un recurso.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existen otros pero estos son los más comunes.&lt;/p&gt;

&lt;p&gt;Cuando ingresas a una página desde un navegador, por debajo el navegador envía un mensaje &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;, lo mismo cuando oprimes un vínculo a otra página.&lt;/p&gt;

&lt;h2 id=&quot;el-código-de-respuesta&quot;&gt;El código de respuesta&lt;/h2&gt;

&lt;p&gt;La primera línea de un mensaje de respuesta tiene un código de 3 dígitos que le indica al cliente cómo interpretar la respuesta.&lt;/p&gt;

&lt;p&gt;Los códigos de respuesta se dividen en cinco categorías dependiendo del dígito con el que inician:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1XX&lt;/strong&gt;: Información&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2XX&lt;/strong&gt;: Éxito&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;3XX&lt;/strong&gt;: Redirección&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;4XX&lt;/strong&gt;: Error en el cliente&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5XX&lt;/strong&gt;: Error en el servidor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seguramente estás familiarizado(a) con el famoso error &lt;strong&gt;404&lt;/strong&gt; que retornan los servidores cuando el recurso no fue encontrado. O con el error &lt;strong&gt;500&lt;/strong&gt; cuando ocurre un error en el servidor. Pero existen muchos más.&lt;/p&gt;

&lt;h2 id=&quot;los-encabezados&quot;&gt;Los encabezados&lt;/h2&gt;

&lt;p&gt;Los encabezados brindan información adicional sobre la petición o la respuesta. Los encabezados tienen la siguiente sintaxis:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-none&quot;&gt;[nombre del encabezado]: [valor del encabezado]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encabezados comunes incluyen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;: el tipo de contenido que se está enviando en el cuerpo de un mensaje de petición, por ejemplo &lt;code class=&quot;highlighter-rouge&quot;&gt;text/html&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt;: el tipo de contenido que el cliente está esperando.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt;: el tipo de navegador que está haciendo la petición&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La siguiente imagen muestra, en las &lt;a href=&quot;/herramientas-de-desarrollador-o-developer-tools&quot; target=&quot;_blank&quot;&gt;herramientas de desarrollo de Chrome&lt;/a&gt;, el mensaje de petición y respuesta cuando hacemos una petición a &lt;code class=&quot;highlighter-rouge&quot;&gt;http://google.com.co/lsdifs&lt;/code&gt;. Fíjate que el código de respuesta es &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/http-request.jpg&quot; class=&quot;photo border&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;url&quot;&gt;URL&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;URL&lt;/strong&gt; (Uniform Resource Locator) se utiliza para ubicar un recurso en Internet. Los &lt;strong&gt;URLs&lt;/strong&gt; no solo se pueden utilizar para el protocolo HTTP, se utilizan en muchos otros protocolos.&lt;/p&gt;

&lt;p&gt;La siguiente imagen muestra las partes de un &lt;strong&gt;URL&lt;/strong&gt; utilizando dos ejemplos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/makeitreal/images/full-stack-curriculum/url.jpg&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Esquema:&lt;/strong&gt; El esquema define el protocolo a utilizar, para HTTP puede ser &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; (el protocolo seguro de HTTP).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; La IP o el nombre del servidor que se quiere acceder (p.e. 127.0.0.1, localhost, google.com, www.google.com.co, etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Puerto:&lt;/strong&gt; El puerto en el que está escuchando el servidor HTTP. Si se omite se asume que es el 80.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Path:&lt;/strong&gt; La ruta al recurso que se quiere acceder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Query String:&lt;/strong&gt; Contiene información adicional para el servidor en forma de propiedades (&lt;code class=&quot;highlighter-rouge&quot;&gt;atributo=valor&lt;/code&gt;). Las propiedades se separan por &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Fragmento:&lt;/strong&gt; La referencia a una ubicación interna del documento.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Germán Escobar</name></author><summary type="html">El protocolo HTTP (HyperText Transfer Protocol) es quizá el protocolo más importante que debemos conocer como desarrolladores Web y la razón por la que muchos tenemos hoy un empleo ;)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/lights.jpeg" /></entry><entry><title type="html">Arriesgarlo todo por cumplir nuestras metas y sueños</title><link href="http://blog.makeitreal.camp/arriesgarlo-todo-por-cumplir-nuestras-metas-y-suenos/" rel="alternate" type="text/html" title="Arriesgarlo todo por cumplir nuestras metas y sueños" /><published>2017-07-30T06:00:00-05:00</published><updated>2017-07-30T06:00:00-05:00</updated><id>http://blog.makeitreal.camp/arriesgarlo-todo-por-cumplir-nuestras-metas-y-suenos</id><content type="html" xml:base="http://blog.makeitreal.camp/arriesgarlo-todo-por-cumplir-nuestras-metas-y-suenos/">&lt;p&gt;Todo empezó por simple curiosidad. ¿Que significaba la programación? ¿Cómo era posible que las personas construyeran algo tan grande simplemente con palabras? ¿Cómo así que con palabras?&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Antes de saber cómo funcionaba más a fondo la programación no me explicaba lógicamente cómo estas palabras se podían transformar en un proyecto de vida que literalmente me cambio la vida y mi forma de pensar.&lt;/p&gt;

&lt;p&gt;Hace unos años la mejor decisión hubiese sido continuar en un trabajo estable e ir ganando posiciones en una compañía. Pero ¿cuál era la participación de la felicidad frente a lo que estaba haciendo? La verdad es que iba disminuyendo con el pasar del tiempo. Los retos que se presentaban eran cada vez más operativos, mas monótonos.&lt;/p&gt;

&lt;p&gt;Lo que me motivó a dar el salto fue ver tanta gente cambiando el mundo, desarrollando nuevas soluciones. ¿Y yo qué estaba haciendo? Lo mismo del día anterior, del anterior a ese y el de un año atrás.&lt;/p&gt;

&lt;p&gt;En ese momento fue que empecé a estudiar programación en un curso online donde pude identificar que, en este sector, la monotonía era mínima. Pueden existir miles de maneras de solucionar un problema y el único limitante es ¿hasta dónde estoy dispuesto a aprender? ¿quiero seguir hasta tener la mejor solución o con una solución que funciona y no es óptima es suficiente para mí?&lt;/p&gt;

&lt;p&gt;Después de este curso inicial empecé con un emprendimiento, con los conocimientos básicos que tenía, donde aprendí por mi cuenta Angular y Firebase (que utilice de base de datos).&lt;/p&gt;

&lt;p&gt;Al encontrar los límites de Firebase fue donde decidí empezar un nuevo curso donde pudiera aprender algún lenguaje para poder realizar el back end de mi aplicación, y fue cuando ingrese a Make it Real. Ahí fue donde sentí que mi conocimiento tuvo el primer gran impulso, permitiéndome aprender mucho más fácil por medio de la metodología implementada, totalmente diferente al primer curso en donde se replicaba los videos del profesor (todo era perfecto), lo cuál hace que se cierre el poder de investigación, que es el método más útil para aprender, porque viene un paso después de aprender haciendo, que es donde se crean los interrogantes.&lt;/p&gt;

&lt;p&gt;A medida que mis conocimientos mejoraban iba encontrando que los problemas que me causaban dificultad antes eran mucho más fáciles de solucionar ahora. Además, me iba dando cuenta que este era el camino que quería tomar para mi vida.&lt;/p&gt;

&lt;p&gt;Cuando veía que en el mercado había una solución nueva para los diferentes tipos de problemas era donde más me motivaba a tomar la decisión definitiva de hacer un cambio en mi vida: pasar de ser Analista Financiero a ser un gran Desarrollador.&lt;/p&gt;

&lt;h2 id=&quot;llegó-el-momento-de-todo-o-nada&quot;&gt;Llegó el momento de todo o nada&lt;/h2&gt;

&lt;p&gt;Luego de ahorrar unos meses fue que decidí tomar el gran salto de dejar el camino seguro, para dedicarme tiempo completo en lo que empezó como un hobby y se convirtió en una pasión. Esta decisión fue más fácil de tomar gracias al acompañamiento del equipo de Make it Real donde empecé a dedicarme tiempo completo a mi aprendizaje y poder ser cada vez mejor para desarrollar soluciones novedosas y tecnológicas que son necesarias para el mundo de hoy, donde los retos son infinitos y hacen falta personas con deseo de romper los paradigmas actuales.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Alejandro Estrada hace parte de nuestro programa Elite (actualmente en Beta) y está documentando todo su aprendizaje en su &lt;a href=&quot;https://medium.com/@estrada9166&quot; target=&quot;_blank&quot;&gt;blog personal&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><author><name>Alejandro Estrada</name></author><summary type="html">Todo empezó por simple curiosidad. ¿Que significaba la programación? ¿Cómo era posible que las personas construyeran algo tan grande simplemente con palabras? ¿Cómo así que con palabras?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/metas-y-suenos.jpeg" /></entry><entry><title type="html">Responsive design: media queries</title><link href="http://blog.makeitreal.camp/responsive-design-media-queries/" rel="alternate" type="text/html" title="Responsive design: media queries" /><published>2017-07-26T06:00:00-05:00</published><updated>2017-07-26T06:00:00-05:00</updated><id>http://blog.makeitreal.camp/responsive-design-media-queries</id><content type="html" xml:base="http://blog.makeitreal.camp/responsive-design-media-queries/">&lt;p&gt;En este post hablaremos sobre media queries, una característica de CSS3 que nos permite crear sitios y aplicaciones Web que se adaptan a diferentes tipos de pantallas.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;A través de &lt;strong&gt;media queries&lt;/strong&gt; podemos definir &lt;strong&gt;reglas CSS&lt;/strong&gt; (estilos) que se activan cuando ciertas condiciones se cumplen, por ejemplo cuando el ancho de la pantalla sea mayor a cierto tamaño.&lt;/p&gt;

&lt;p&gt;Un &lt;strong&gt;media query&lt;/strong&gt; se declara utilizando la palabra clave &lt;code class=&quot;highlighter-rouge&quot;&gt;@media&lt;/code&gt; seguido de una expresión entre paréntesis y un bloque de &lt;strong&gt;reglas CSS&lt;/strong&gt; como se muestra a continuación:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;992px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* acá van las reglas CSS que aplican para este media query */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Las &lt;strong&gt;reglas CSS&lt;/strong&gt; se activan únicamente cuando se cumple la expresión que está entre paréntesis. En este caso la expresión es &lt;code class=&quot;highlighter-rouge&quot;&gt;min-width: 992px&lt;/code&gt;, es decir, cuando la pantalla tiene un ancho igual o superior a 992 pixeles.&lt;/p&gt;

&lt;p&gt;Además de &lt;code class=&quot;highlighter-rouge&quot;&gt;min-width&lt;/code&gt; también existe &lt;code class=&quot;highlighter-rouge&quot;&gt;max-width&lt;/code&gt; para definir el ancho máximo de la pantalla para el que aplica el &lt;strong&gt;media query&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por ejemplo, si queremos que el color de fondo sea rojo cuando el ancho de la pantalla sea de máximo 700 pixeles podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ingresa a &lt;a href=&quot;https://codepen.io/germanescobar/pen/qXEgJj?editors=0100&quot; target=&quot;_blank&quot;&gt;este enlace&lt;/a&gt; para ver y jugar con este ejemplo. Cambia el ancho del área donde se muestra el resultado para ver en qué punto cambia el color de fondo.&lt;/p&gt;

&lt;h2 id=&quot;puntos-de-quiebre-breakpoints&quot;&gt;Puntos de quiebre (breakpoints)&lt;/h2&gt;

&lt;p&gt;Los puntos de quiebre (o breakpoints) son los anchos (en pixeles) en los que ocurren cambios en nuestra página para que se adapte a diferentes pantallas.&lt;/p&gt;

&lt;p&gt;En vez de utilizar los valores que se nos ocurran para los anchos de diferentes pantallas, se han definido ciertos valores para determinar el tipo de pantalla que se está usando:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hasta &lt;code class=&quot;highlighter-rouge&quot;&gt;575px&lt;/code&gt; son teléfonos móviles en modo vertical.&lt;/li&gt;
  &lt;li&gt;De &lt;code class=&quot;highlighter-rouge&quot;&gt;576px&lt;/code&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;767px&lt;/code&gt; son teléfonos móviles en modo horizontal.&lt;/li&gt;
  &lt;li&gt;De &lt;code class=&quot;highlighter-rouge&quot;&gt;768px&lt;/code&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;991px&lt;/code&gt; son tabletas.&lt;/li&gt;
  &lt;li&gt;De &lt;code class=&quot;highlighter-rouge&quot;&gt;992px&lt;/code&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;1199px&lt;/code&gt; son pantallas de escritorio normales.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1200px&lt;/code&gt; o más son pantallas grandes como televisores.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sin embargo, cuando hablamos de &lt;strong&gt;puntos de quiebre&lt;/strong&gt; nos referimos a un ancho específico, por ejemplo &lt;code class=&quot;highlighter-rouge&quot;&gt;768px&lt;/code&gt;, que es el momento en el que cambia la pantalla de teléfono móvil a tableta.&lt;/p&gt;

&lt;p&gt;Estos valores son sólo una referencia. El ancho de la mayoría de pantallas de escritorio hoy en día, por ejemplo, es de más de &lt;code class=&quot;highlighter-rouge&quot;&gt;1200px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A continuación veremos cómo utilizar estos puntos de quiebre para crear aplicaciones que se adaptan a diferentes pantallas.&lt;/p&gt;

&lt;h2 id=&quot;mobile-first&quot;&gt;Mobile first&lt;/h2&gt;

&lt;p&gt;¿Dónde ubicamos y cómo organizamos los &lt;strong&gt;media quieries&lt;/strong&gt; en nuestros archivos CSS? Lo que se recomienda es utilizar una estrategia llamada &lt;strong&gt;mobile first&lt;/strong&gt; en donde primero se definen las reglas dirigidas a teléfonos móviles y con &lt;strong&gt;media queries&lt;/strong&gt; ajustamos el contenido para pantallas más anchas.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo. Imagina que queremos ir incrementando el tamaño de la letra de acuerdo al ancho de la pantalla:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;14px&lt;/code&gt; en teléfonos móviles.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;15px&lt;/code&gt; para tabletas.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;16px&lt;/code&gt; para pantallas de escritorio normales.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;17px&lt;/code&gt; para pantallas grandes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo primero que vamos a definir es el estilo para telefonos móviles y después utilizamos &lt;strong&gt;media queries&lt;/strong&gt; para los demás:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* mobile first */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* tabletas */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;768px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* escritorio normales */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;992px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* pantallas grandes */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;17px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Primero estamos definiendo el tamaño por defecto de &lt;code class=&quot;highlighter-rouge&quot;&gt;14px&lt;/code&gt;. Después utilizamos un &lt;strong&gt;media query&lt;/strong&gt; con expresión &lt;code class=&quot;highlighter-rouge&quot;&gt;min-width: 768px&lt;/code&gt; que cambia el tamaño a &lt;code class=&quot;highlighter-rouge&quot;&gt;15px&lt;/code&gt;, sobrescribiendo el valor anterior. Lo mismo ocurre con los otros dos &lt;strong&gt;media queries&lt;/strong&gt;: si se activan sobrescriben el valor anterior.&lt;/p&gt;

&lt;p&gt;Por ejemplo, si el ancho de la pantalla es de &lt;code class=&quot;highlighter-rouge&quot;&gt;1000px&lt;/code&gt; esto es lo que ocurre:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El navegador encuentra el tamaño por defecto de &lt;code class=&quot;highlighter-rouge&quot;&gt;14px&lt;/code&gt; y lo aplica.&lt;/li&gt;
  &lt;li&gt;Encuentra el primer &lt;strong&gt;media query&lt;/strong&gt; con expresión &lt;code class=&quot;highlighter-rouge&quot;&gt;min-width: 768px&lt;/code&gt; y, como la pantalla supera los &lt;code class=&quot;highlighter-rouge&quot;&gt;768px&lt;/code&gt;, sobrescribe el tamaño de la letra que queda con un valor de &lt;code class=&quot;highlighter-rouge&quot;&gt;15px&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Continúa con el segundo &lt;strong&gt;media query&lt;/strong&gt; con expresión &lt;code class=&quot;highlighter-rouge&quot;&gt;min-width: 992px&lt;/code&gt; y de nuevo sobrescribe el tamaño de la letra que queda con un valor de &lt;code class=&quot;highlighter-rouge&quot;&gt;16px&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Por último, evalúa el último &lt;strong&gt;media query&lt;/strong&gt; con expresión &lt;code class=&quot;highlighter-rouge&quot;&gt;min-width: 1200px&lt;/code&gt;, pero esta condición no se cumple, así que lo ignora.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Al final el tamaño de la letra que se va a utilizar es &lt;code class=&quot;highlighter-rouge&quot;&gt;16px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ten mucho cuidado con el orden. Si por ejemplo, movieramos el valor por defecto al final, después de todos los otros &lt;strong&gt;media queries&lt;/strong&gt;, la letra siempre quedaría de &lt;code class=&quot;highlighter-rouge&quot;&gt;14px&lt;/code&gt;. ¿Puedes explicar por qué?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Espero que esta introducción te haya ayudado a entender qué son y cómo funcionan los &lt;strong&gt;media queries&lt;/strong&gt;. Aunque existen otras características que puedes utilizar para describir las pantallas (como el alto y la orientación), las opciones que vimos en este post (&lt;code class=&quot;highlighter-rouge&quot;&gt;min-width&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;max-width&lt;/code&gt;) son las más comunes y un excelente punto de partida.&lt;/p&gt;

&lt;p&gt;Los &lt;strong&gt;media queries&lt;/strong&gt; son el componente fundamental de &lt;strong&gt;responsive design&lt;/strong&gt;, pero para que una página sea completamente adaptable debes verificar también que las imágenes, videos, tablas, etc. se vean bien en todos los dispositivos.&lt;/p&gt;

&lt;p&gt;Por último, si quieres ver ejemplos de responsive design te recomiendo estos dos sitios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mediaqueri.es/&quot;&gt;https://mediaqueri.es/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://responsivedesign.is/examples/&quot;&gt;https://responsivedesign.is/examples/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Germán Escobar</name></author><summary type="html">En este post hablaremos sobre media queries, una característica de CSS3 que nos permite crear sitios y aplicaciones Web que se adaptan a diferentes tipos de pantallas.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/responsive-design.jpg" /></entry><entry><title type="html">¿Qué es concurrencia?</title><link href="http://blog.makeitreal.camp/concurrencia/" rel="alternate" type="text/html" title="¿Qué es concurrencia?" /><published>2017-07-12T12:00:00-05:00</published><updated>2017-07-12T12:00:00-05:00</updated><id>http://blog.makeitreal.camp/concurrencia</id><content type="html" xml:base="http://blog.makeitreal.camp/concurrencia/">&lt;p&gt;En este post vamos ver qué es concurrencia, cuáles son los dos modelos más populares que existen actualmente y cómo la concurrencia afecta el código que escribes.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrencia&lt;/strong&gt; es la habilidad que tiene un computador de realizar varias tareas a la vez.&lt;/p&gt;

&lt;p&gt;Gracias a la &lt;strong&gt;concurrencia&lt;/strong&gt; es que puedes ver un video en YouTube mientas subes un archivo a Dropbox y hablas con tus amigos en Facebook, todo a la vez.&lt;/p&gt;

&lt;p&gt;Sin embargo, eso no significa necesariamente que todo pase &lt;strong&gt;al mismo tiempo&lt;/strong&gt;, es decir, en paralelo. Eso depende del número de procesadores (o cores) que tenga tu computador.&lt;/p&gt;

&lt;p&gt;Si tu computador sólo tiene un procesador, el sistema operativo &lt;strong&gt;simula&lt;/strong&gt; que está haciendo todo al mismo tiempo, pero lo que realmente hace es darle, a las aplicaciones, acceso al procesador por turnos cortos de tiempo.&lt;/p&gt;

&lt;p&gt;Existen varios modelos de concurrencia y cada lenguaje de programación implementa alguno de ellos. En este post vamos a explicar dos de ellos: &lt;strong&gt;hilos&lt;/strong&gt; (threads en Inglés), que es el modelo más básico y el que utilizan lenguajes como Java, Ruby y PHP, entre otros, y &lt;strong&gt;basado en eventos&lt;/strong&gt; (event-driven), que es el que utiliza JavaScript.&lt;/p&gt;

&lt;h2 id=&quot;io-vs-procesamiento&quot;&gt;I/O vs Procesamiento&lt;/h2&gt;

&lt;p&gt;La mayor parte del tiempo los computadores no están ejecutando código, están ocupados en operaciones de &lt;strong&gt;I/O&lt;/strong&gt; (&lt;strong&gt;Input/Output&lt;/strong&gt;)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; como leer un archivo, hacer llamados HTTP, esperar a que el usuario escriba algo en el teclado, etc.&lt;/p&gt;

&lt;p&gt;Por ejemplo, imagina que debemos escribir un programa que cuente cuántos links tienen tres páginas Web. Una posible solución sería la siguiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;overflow language-ruby&quot;&gt;contar_links(&quot;http://sitio1.com/&quot;)
contar_links(&quot;http://sitio2.com/&quot;)
contar_links(&quot;http://sitio3.com/&quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este código se ejecuta de forma &lt;strong&gt;secuencial&lt;/strong&gt;: hasta que no termine de analizar la primera página no continúa con la segunda, y hasta que no termine con la segunda no continúa con la tercera. A esto también se le conoce como &lt;strong&gt;código sincrónico&lt;/strong&gt; porque estamos esperando que cada operación termine antes de continuar con la siguiente.&lt;/p&gt;

&lt;h2 id=&quot;threads-hilos&quot;&gt;Threads (hilos)&lt;/h2&gt;

&lt;p&gt;El problema del &lt;strong&gt;código sincrónico&lt;/strong&gt; es que, aunque es fácil de entender, no siempre hace el mejor uso de los recursos del sistema. En el ejemplo anterior sería mejor analizar las tres páginas de forma &lt;strong&gt;concurrente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La forma en que la mayoría de lenguajes de programación permiten escribir código concurrente es creando &lt;strong&gt;threads&lt;/strong&gt; (hilos).&lt;/p&gt;

&lt;p&gt;En vez de intentar definir exactamente qué es un &lt;strong&gt;hilo&lt;/strong&gt;, veamos un ejemplo. La sintaxis para crear &lt;strong&gt;hilos&lt;/strong&gt; varía dependiendo del lenguaje, en Ruby se crean con &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.new&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;overflow language-ruby&quot;&gt;t1 = Thread.new {
  contar_links(&quot;http://sitio1.com/&quot;)
}
t2 = Thread.new {
  contar_links(&quot;http://sitio2.com/&quot;)
}
t3 = Thread.new {
  contar_links(&quot;http://sitio3.com/&quot;)
}

# debemos esperar a que terminen los 3 archivos
t1.join
t2.join
t3.join&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El código que está entre los corchetes de cada &lt;strong&gt;hilo&lt;/strong&gt; es lo que se va a ejecutar en algún momento en el futuro, no sabemos es en qué momento. Por esa razón al final utilizamos el método &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; sobre cada &lt;strong&gt;hilo&lt;/strong&gt;, para esperar a que terminen.&lt;/p&gt;

&lt;p&gt;Aunque los &lt;strong&gt;hilos&lt;/strong&gt; se ejecutan de forma concurrente, &lt;strong&gt;no podemos decir que se van a ejecutar en paralelo&lt;/strong&gt;, eso depende del número de procesadores que tenga la máquina y, para el caso de Ruby, la implementación de Ruby que estemos utilizando&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;La siguiente imagen muestra la diferencia entre ejecución secuencial, concurrente y paralela:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/concurrency.png&quot; alt=&quot;Concurrencia&quot; class=&quot;photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aunque los dos diagramas de la derecha son concurrentes, &lt;strong&gt;los hilos sólo se ejecutan en paralelo cuando tienes dos o más procesadores&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;problemas-de-los-hilos&quot;&gt;Problemas de los hilos&lt;/h3&gt;

&lt;p&gt;En muchos casos utilizar &lt;strong&gt;hilos&lt;/strong&gt; es mejor que ejecutar el código de forma secuencial. Sin embargo, eso no quiere decir que sean la solución ideal.&lt;/p&gt;

&lt;p&gt;Existen tres problemas principales con la concurrencia basada en &lt;strong&gt;hilos&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Es posible que los nuevos &lt;strong&gt;hilos&lt;/strong&gt; ocupen la mayor parte del tiempo en &lt;strong&gt;I/O&lt;/strong&gt;, como en nuestro ejemplo anterior.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Crear y administrar &lt;strong&gt;hilos&lt;/strong&gt; tiene un impacto en memoria y en procesamiento. El impacto de cada &lt;strong&gt;hilo&lt;/strong&gt; es bajo pero empieza a ser considerable cuando tienes miles de hilos activos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sincronizar varios &lt;strong&gt;hilos&lt;/strong&gt; es complicado. El problema es que todos pueden acceder a la misma información pero en diferente orden y la aplicación puede terminar en un estado inválido o quedar bloqueada en una &lt;a href=&quot;https://es.wikipedia.org/wiki/Condici%C3%B3n_de_carrera&quot; target=&quot;_blank&quot;&gt;condición de carrera&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;basado-en-eventos-event-driven&quot;&gt;Basado en eventos (event driven)&lt;/h2&gt;

&lt;p&gt;En un modelo basado en eventos, como el que usa JavaScript, el código de la aplicación se ejecuta en un único &lt;strong&gt;hilo&lt;/strong&gt; y las operaciones de &lt;strong&gt;I/O&lt;/strong&gt; se delegan a otros &lt;strong&gt;hilos&lt;/strong&gt; de apoyo.&lt;/p&gt;

&lt;p&gt;La ventaja del modelo basado en eventos es que el &lt;strong&gt;hilo principal sólo ejecuta código y nunca se bloquea por operaciones de I/O&lt;/strong&gt;. La desventaja es que el código es más difícil de escribir y entender.&lt;/p&gt;

&lt;p&gt;La siguiente imagen ilustra cómo funciona la concurrencia basada en eventos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/async-io.png&quot; alt=&quot;Concurrencia basada en eventos&quot; class=&quot;photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cada vez que hacemos operaciones de &lt;strong&gt;I/O&lt;/strong&gt;, el &lt;strong&gt;hilo principal&lt;/strong&gt; delega la operación a un &lt;strong&gt;hilo&lt;/strong&gt; de apoyo. Veamos un ejemplo en &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; en el que estamos leyendo el contenido de un archivo:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;archivo_grande.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Terminó de leer el archivo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;El método &lt;code class=&quot;highlighter-rouge&quot;&gt;readFile&lt;/code&gt; es &lt;strong&gt;no bloqueante&lt;/strong&gt;, así que va a delegar la ejecución a otro &lt;strong&gt;hilo&lt;/strong&gt;. Pero ¿cómo sabemos cuándo terminó de leer el archivo?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readFile&lt;/code&gt; recibe una &lt;strong&gt;función&lt;/strong&gt; que es invocada cuando el &lt;strong&gt;hilo de apoyo&lt;/strong&gt; termina de leer el archivo. A esta técnica se le llama &lt;strong&gt;código asincrónico&lt;/strong&gt;, o &lt;strong&gt;código basado en eventos&lt;/strong&gt;, porque la &lt;strong&gt;función&lt;/strong&gt; no se ejecuta inmediatamente, sino que va a ser invocada en algún momento en el futuro.&lt;/p&gt;

&lt;p&gt;A la función que le pasamos al método &lt;code class=&quot;highlighter-rouge&quot;&gt;readFile&lt;/code&gt; se le conoce como un &lt;strong&gt;callback&lt;/strong&gt;, que en Español significa “devolver la llamada”.&lt;/p&gt;

&lt;p&gt;Si ejecutamos el código anterior vas a ver en pantalla &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hola&quot;&lt;/code&gt; antes de &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Terminó de leer el archivo&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Utilizar &lt;strong&gt;I/O no bloqueante y eventos&lt;/strong&gt; es una forma muy eficiente de utilizar los recursos del sistema pero hace que el código sea más difícil de escribir y entender. Es por eso que la comunidad de &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; siempre está buscando formas de que el &lt;strong&gt;código asincrónico&lt;/strong&gt; se vea más como &lt;strong&gt;código sincrónico&lt;/strong&gt;. Ejemplos incluyen las &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot; target=&quot;_blank&quot;&gt;Promesas&lt;/a&gt; y la más reciente &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot; target=&quot;_blank&quot;&gt;función async&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Espero que este post te haya dado una idea sobre qué es concurrencia, qué son y cómo funcionan los hilos, qué es la concurrencia basada en eventos y qué es &lt;strong&gt;I/O no bloqueante&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No es que un modelo de concurrencia sea superior al otro. Cada uno tiene sus ventajas y desventajas, también depende mucho del tipo de aplicación que estés desarrollando.&lt;/p&gt;

&lt;p&gt;Por ejemplo, &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; es ideal para aplicaciones que principalmente realizan operaciones de &lt;strong&gt;I/O&lt;/strong&gt;, como un sistema de streaming de video, por ejemplo.&lt;/p&gt;

&lt;p&gt;Los hilos, por otro lado, pueden ser muy eficientes en aplicaciones que realizan principalmente tareas de procesamiento.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;En Español &lt;strong&gt;E/S&lt;/strong&gt; (&lt;strong&gt;Entrada/Salida&lt;/strong&gt;).&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;La implementación de referencia de Ruby (MRI), por ejemplo, no soporta la ejecución de varios threads en paralelo, así el computador tenga varios procesadores.&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Germán Escobar</name></author><summary type="html">En este post vamos ver qué es concurrencia, cuáles son los dos modelos más populares que existen actualmente y cómo la concurrencia afecta el código que escribes.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.makeitreal.camp/assets/images/bg-images/concurrency.jpeg" /></entry></feed>